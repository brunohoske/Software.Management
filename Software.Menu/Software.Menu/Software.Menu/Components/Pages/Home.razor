@using Models;
@using DAL
@using System.Text.Json;
@inject HttpClient _httpClient
@inject NavigationManager nav
@rendermode InteractiveServer

@page "/{CompanyName}/CARDAPIO/M{Comanda}"

@code {

    public Menu menu { get; set; }
    [Parameter]
    public string Comanda { get; set; }
    [Parameter]
    public string CompanyName { get; set; }

    public List<Product> Produtos { get; set; }

    public List<Product> ProductsInOrder = new List<Product>();
    public List<Order> OrdersInCheck = new List<Order>();

    public double total;
    public async Task CarregarProdutosAsync()
    {
        Produtos = await GetProducts();
    }

    private void AddProductToOrder(Product produto)
    {
        ProductsInOrder.Add(produto);
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        await CarregarProdutosAsync();
        OrdersInCheck = await GetOrders();
    DALCompany dc = new DALCompany();
        @if (dc.CheckExist(CompanyName))
        {
            menu = new Menu() { Company = dc.GetCompanyPerName(CompanyName) };
        }
        else
        {
            menu = new Menu();
        }
    }

    private void CloseOrder()
    {
        nav.NavigateTo($"Payment/{menu.Company.cnpj = "42591651000143"}/{Comanda}/Close");
    }

}

@code{
    [SupplyParameterFromForm]
    public Order Order {get;set;}
}
<PageTitle>Home</PageTitle>

<div class="rest-banner">
    <img src="@(CompanyName.ToLower() == "mcdonalds" ? @"Images\McDonalds-Banner.png" : @"Images\BurgerKing-Banner.jpg")" class="rest-banner">
</div>

<h5>@menu.Company.Name - CARDAPIO - COMANDA #1</h5>



<section id="products1">

    
    @foreach(var item in Produtos)
    {
        <div class="container-ger">
            <div class="container-item">
                <div class="imagem"><img src="/Images/hamburguer1.png" alt=""></div>
                <div class="item">
                    <div class="desc-img">
                        <h3>Nome:@item.Name</h3>
                        <h3>Descrição:@item.Description</h3>
                        <h3>Valor:@item.Value</h3>
                        <button @onclick="() => AddProductToOrder(item)">Adicionar</button> 
                    </div>
                </div>
            </div>
        </div>

    }

</section>


<section class="cart">
    
    <div class="cartpos">
        <div class="itemCart">
            <h1>Carrinho</h1>
        </div>

        
        @if(ProductsInOrder.Count != 0 && ProductsInOrder != null)
        {
            @foreach (var item in ProductsInOrder)
            {
                <div class="itemCart">
                    <h2>1 -</h2>
                    <h3>Produto: @item.Name</h3>
                    <h3>Valor: @item.Value</h3>
                    <button @onclick="() => ProductsInOrder.Remove(item)">Remover</button>
                    
                </div>
            }
        }
        
        <div class="divbtnConcluir" @onclick="() => SubmitOrder(ProductsInOrder)"><button class="btnConcluir">Concluir</button></div>
    </div>
    
</section>

<section class="check">

    <h2>Total dos pedidos:</h2>
    
    @for (int i = 0; i < OrdersInCheck.Count; i++)
    {
        <h3>Pedido: @OrdersInCheck[i].Id</h3>
        <h3 style=" color:@(OrdersInCheck[i].Status == 1 ? "red" : (OrdersInCheck[i].Status == 2 ? "yellow": "green")) ">
            Status: @(OrdersInCheck[i].Status == 1 ? "Enviado a cozinha" : (OrdersInCheck[i].Status == 2 ? "Preparando": "Pedido Pronto")) 
        </h3>

        @for (int c = 0; c < OrdersInCheck[i].Products.Count; c++)
        {
        <div class="container">

            <div class="item">

                <h3> Produto: @OrdersInCheck[i].Products[c].Name </h3>

                <h3> Valor: @OrdersInCheck[i].Products[c].Value</h3>
            </div>

        </div>
        }
        
    }
    @foreach (var item in OrdersInCheck)
    {
        total += item.Value;
        
    }
    <h3>TOTAL: @total</h3>
    <div class="divbtnConcluir" style="justify-content: center;" @onclick="CloseOrder"><button style="background-color: #ea684b; width: 165px; " class="btnConcluir">Fechar comanda</button></div>
</section>

@code{

    private async Task SubmitOrder(List<Product> p)
    {
        try
        {
            double total = 0;
            foreach (var item in p)
            {
                total += item.Value;
            }

            Order order = new Order()
                {
                    Id = await GetOrderNumber(),
                    Products = p,
                    Date = System.DateTime.Now,
                    Store = new Company("McDonalds") { cnpj = "42591651000143" },
                    Table = new Table() { TableNumber = int.Parse(Comanda), Store = new Company("McDonalds") { cnpj = "42591651000143" } },
                    Value = total

                };

            string jsonBody = System.Text.Json.JsonSerializer.Serialize(order);
            HttpContent httpContent = new StringContent(jsonBody, System.Text.Encoding.UTF8, "application/json");

            HttpResponseMessage response = await _httpClient.PostAsync("Orders", httpContent);
            ProductsInOrder.Clear();
            nav.Refresh();



        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro ao enviar pedido"+ex.Message);
        }
    }

    async Task<List<Product>> GetProducts()
    {
        HttpResponseMessage response = _httpClient.GetAsync("Products").Result;
        var content = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        List<Product> p = System.Text.Json.JsonSerializer.Deserialize<List<Product>>(content,options);



        return p;
    }

    async Task<int> GetOrderNumber()
    {
        HttpResponseMessage response = _httpClient.GetAsync("OrderNumber").Result;
        var content = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        int number = System.Text.Json.JsonSerializer.Deserialize<int>(content, options);



        return number;
    }

    public async Task<List<Order>> GetOrders()
    {
        HttpResponseMessage response = _httpClient.GetAsync("GetOrdersInTable").Result;
        var content = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        List<Order> o = System.Text.Json.JsonSerializer.Deserialize<List<Order>>(content, options);



        return o;
    }




}
