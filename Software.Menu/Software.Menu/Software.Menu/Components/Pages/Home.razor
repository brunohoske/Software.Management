@using Software.Menu.Models;
@using System.Text.Json;
@inject HttpClient _httpClient
@inject NavigationManager nav
@rendermode InteractiveServer

@page "/{Cnpj}/CARDAPIO/M{Comanda}"

@code {
    public MenuClient _client;

    public Menu menu { get; set; }
    [Parameter]
    public string Comanda { get; set; }
    [Parameter]
    public string Cnpj { get; set; }

    Company Store = new Company();


    private List<Product> Produtos = new List<Product>();

    private List<ItemCart> Cart = new List<ItemCart>();
    private List<Order> OrdersInCheck = new List<Order>();
    private List<Category> Categories = new List<Category>();

    private bool _isFirstRender = true;
    private double total;
    private double totalGeral;

    private async Task CarregarProdutosAsync()
    {
        Produtos = await GetProducts();
    }
    private async Task GetCategories()
    {
        Categories = await _client.GetCategories();
    }
    private void AddProductToOrder(Product product)
    {
        Cart.Add(new ItemCart() { Product = product, Quantity = 1, Notes = new List<string>(), Table = new Table() { TableNumber = int.Parse(Comanda) }, Store = new Company() { Cnpj = Cnpj } });
    }
    private void CalculateTotalGeral()
    {
        totalGeral = OrdersInCheck.Sum(order => order.Value);
    }
    private void CloseOrder()
    {
        nav.NavigateTo($"Payment/{menu.Company.Cnpj}/{Comanda}/Close");
    }
    private void RemoveProductFromOrder(ItemCart item)
    {
        // ProductsInOrder.Remove(product);
        Cart.Remove(item);
    }
    private async Task GoToProductPage(int id)
    {
        nav.NavigateTo($"{menu.Company.Cnpj}/Product/{id}/{Comanda}");
        await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
    }
    private async Task GetSessionCart()
    {
        var cartJson = await SessionStorage.GetAsync<string>("cart");
        if(cartJson.Value != null)
        {
            List<ItemCart> cart = System.Text.Json.JsonSerializer.Deserialize<List<ItemCart>>(cartJson.Value);
            foreach (var item in cart)
            {
                if(item.Table.TableNumber == int.Parse(Comanda) && item.Store.Cnpj == Cnpj)
                {
                    Cart.Add(item);
                }
                
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        _client = new MenuClient($"{Cnpj}");
        await CarregarProdutosAsync();
        Store = await GetCompanyFromCnpj(Cnpj);
        OrdersInCheck = await GetOrders();
        await GetCategories();


        @if (Store.Name != string.Empty)
        {
            menu = new Menu() { Company = Store};
        }
        else
        {
            menu = new Menu();
        }
        CalculateTotalGeral();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetSessionCart();
            _isFirstRender = false;
            StateHasChanged();
        }
    }

    private async Task IncrementItem(ItemCart item)
    {
        item.Quantity++; StateHasChanged();
    }
    private async Task DecrementItem(ItemCart item)
    {
        item.Quantity--; StateHasChanged();
    }

}

<PageTitle>Home</PageTitle>

<div class="banner">
    <img src="@(menu.Company.Name.ToLower() == "mcdonalds" ? @"Images/McDonalds-Banner.png" : @"Images/BurgerKing-Banner.jpg")" alt="Restaurant Banner">
</div>

<h2 class="menu-title">@menu.Company.Name - Cardápio</h2>

<section id="menu" class="menu-section">
    <div class="product-category">
        <h3 class="category-title">Todos os Produtos</h3>
        <div class="product-list">
            @foreach (var item in Produtos)
            {
                <div class="product-card" @onclick="()=>GoToProductPage(item.Id)">
                    <img  src="/Images/hamburguer1.png" alt="Product Image" class="product-image" />
                    <div class="product-details">
                        <h4 class="product-name">@item.Name</h4>
                        <p class="product-description">@item.Description</p>
                        <div class="product-bottom">
                            <span class="product-price">R$ @item.Value.ToString("F2")</span>
                            <button class="add-to-cart">Adicionar</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
  @*   @foreach (var category in Categories)
    {
        <div class="product-category">
            <h3 class="category-title">@category.Name</h3>
            <div class="product-list">
                @foreach (var item in Produtos)
                {
                    @if(item.Category.IdCategory == category.IdCategory)
                    {
                        <div class="product-card"  @onclick="()=>GoToProductPage(item.Id)">
                            <img src="/Images/hamburguer1.png" alt="Product Image" class="product-image" />
                            <div class="product-details">
                                <h4 class="product-name">@item.Name</h4>
                                <p class="product-description">@item.Description</p>
                                <div class="product-bottom">
                                    <span class="product-price">R$ @item.Value.ToString("F2")</span>
                                    <button class="add-to-cart">Adicionar</button>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div> *@
    


    @foreach (var category in Categories)
    {
        @if(category.IsDisplay == 1)
        {
            <div class="product-category">
                <h3 class="category-title">@category.Name</h3>
                <div class="product-list">
                    @foreach (var product in category.Products)
                    {
                        <div class="product-card" @onclick="()=>GoToProductPage(product.Id)">
                            <img src="/Images/hamburguer1.png" alt="Product Image" class="product-image" />
                            <div class="product-details">
                                <h4 class="product-name">@product.Name</h4>
                                <p class="product-description">@product.Description</p>
                                <div class="product-bottom">
                                    <span class="product-price">R$ @product.Value.ToString("F2")</span>
                                    <button class="add-to-cart">Adicionar</button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
        
    }
</section>

<section id="cart" class="cart-section">
    <h3>Meu Carrinho</h3>
    <div class="cart-items">
        @if (Cart.Any())
        {
            @foreach (var item in Cart.ToList())
            {
                <div class="cart-item">

                    <span class="cart-item-name">@item.Product.Name <br/>
                        @if (item.GetNote() != "")
                        {
                            <span class="cart-item-notes" style="color: #8c8c8c;font-weight: normal;">Observações: @item.GetNote()</span>
                        }
                    </span>
                    <button class="quantity-btn" @onclick="()=>DecrementItem(item)">-</button>
                    <span class="">x.@item.Quantity </span>
                    <button class="quantity-btn" @onclick="()=>IncrementItem(item)">+</button>
                    @* <span class="cart-item-price">R$@(item.Product.Value * item.Quantity)</span> *@
                    <span class="cart-item-price">R$@(item.GetPrice() )</span>
                    <button class="remove-button" @onclick="() => RemoveProductFromOrder(item)">Remover</button>


                </div>
            }
            <h4 class="cart-total">Total: R$ @Cart.Sum(p => p.GetPrice())</h4>
            <button class="btn-submit-order" @onclick="() => SubmitOrder(Cart)">Finalizar Pedido</button>
        }
        else
        {
            <p class="empty-cart">Seu carrinho está vazio.</p>
        }
    </div>
</section>

<section class="order-status-section">
    <h3>Status dos Pedidos</h3>
    @foreach (var order in OrdersInCheck)
    {
        <div class="order-status">
            <h4>Pedido: @order.Id</h4>
            <p class="status-text" style="color:@(order.Status == 1 ? "red" : (order.Status == 2 ? "yellow": "green"))">
                Status: @(order.Status == 1 ? "Enviado à cozinha" : (order.Status == 2 ? "Preparando" : "Pedido Pronto"))
            </p>
            <ul>
                @foreach (var product in order.Products)
                {
                    <li>@product.Name - R$ @product.Value</li>
                }
            </ul>
        </div>
    }
</section>

<section id="summary">
    <section id="order-summary" class="order-summary-section">
        <h3>Resumo dos Pedidos</h3>
        <div class="order-summary">
            <p>Total dos Pedidos Realizados:</p>
            <h4 class="order-total">R$ @totalGeral</h4>
        </div>
        <button class="btn-close-order" @onclick="CloseOrder">Fechar Comanda</button>
    </section>
</section>

@code{

    private async Task<Company> GetCompanyFromCnpj(string cnpj)
    {
        HttpResponseMessage response = _httpClient.GetAsync($"Company/{cnpj}").Result;
        var content = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        if(response.IsSuccessStatusCode)
        {
            return System.Text.Json.JsonSerializer.Deserialize<Company>(content, options);
        }
        return new Company();

    }

    private async Task SubmitOrder(List<ItemCart> itens)
    {
        try
        {
            double total = 0;
            List<ProductDTO> productsDTO = new List<ProductDTO>();
            foreach(var item in itens)
            {
                for (int i = 0; i < item.Quantity; i++)
                {
                    var productDto = mapper.Map<ProductDTO>(item.Product);
                    productDto.Note = item.GetNote();
                    productsDTO.Add(productDto);
                    // foreach (var acomp in item.Acompanhamentos)
                    // {
                    //     for(int index = 0; index < acomp.Quantity; index++)
                    //     {
                    //         var acompanhamentoDto = mapper.Map<ProductDTO>(acomp.Product);
                    //         acompanhamentoDto.Note = "";
                    //         productsDTO.Add(acompanhamentoDto);
                    //     }
                        
                    // }
                }

                total += item.GetPrice();
            }

            Order order = new Order()
                {
                    Id = await GetOrderNumber(),
                    Date = System.DateTime.Now,
                    Store = new Company("McDonalds") { Cnpj = Cnpj },
                    Table = new Table() { TableNumber = int.Parse(Comanda), Store = new Company("McDonalds") { Cnpj = Cnpj } },
                    Value = total

                };

            OrderDTO orderDTO = new OrderDTO()
            {
                Id = order.Id,
                Products = productsDTO,
                Date = order.Date,
                Store = order.Store,
                Table = order.Table,
                Value = order.Value
            };

            string jsonBody = System.Text.Json.JsonSerializer.Serialize(orderDTO);
            HttpContent httpContent = new StringContent(jsonBody, System.Text.Encoding.UTF8, "application/json");

            HttpResponseMessage response = await _httpClient.PostAsync("Orders", httpContent);
            Cart.Clear();
            await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
            nav.Refresh(true);



        }
        catch (Exception ex)
        {
            Console.WriteLine("Erro ao enviar pedido"+ex.Message);
        }
    }

    async Task<List<Product>> GetProducts()
    {
        HttpResponseMessage response = _httpClient.GetAsync("Products").Result;
        var content = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        List<Product> p = System.Text.Json.JsonSerializer.Deserialize<List<Product>>(content,options);



        return p;
    }

    async Task<int> GetOrderNumber()
    {
        HttpResponseMessage response = _httpClient.GetAsync("OrderNumber").Result;
        var content = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        int number = System.Text.Json.JsonSerializer.Deserialize<int>(content, options);



        return number;
    }

    public async Task<List<Order>> GetOrders()
    {
        HttpResponseMessage response = _httpClient.GetAsync($"GetOrdersInTable/{Comanda}").Result;
        var content = await response.Content.ReadAsStringAsync();
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

        List<Order> o = System.Text.Json.JsonSerializer.Deserialize<List<Order>>(content, options);



        return o;
    }




}
