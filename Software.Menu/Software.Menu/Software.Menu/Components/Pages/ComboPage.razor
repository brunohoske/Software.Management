@page "/{Cnpj}/Combo/{idCombo}/{TableNumber}"
@using System.Text.Json
@using System.Text.Json.Serialization.Metadata

@rendermode InteractiveServer
@inject IJSRuntime js



@code {
    [Parameter]
    public string Cnpj { get; set; } = null!;
    [Parameter]
    public string TableNumber { get; set; } = null!;
    [Parameter]
    public string idCombo { get; set; } = null!;

    List<Product> productsSelectedsGroup = new List<Product>();


    Company store = new Company();
    //List<Ingredient> ingredients = new List<Ingredient>();
    List<Product> selectedAcomps = new List<Product>();
    ItemCart itemCart = new ItemCart();
    List<ItemCart> acomps = new List<ItemCart>();
    List<ItemCart> Cart = new List<ItemCart>();
    List<string> notes = new List<string>();
    int quantity = 1;
    //Product selectedProduct;
    Combo selectedCombo;
    private bool _isFirstRender = true;

    List<(int, bool)> _productCheck = new List<(int, bool)>();

    public Table Table { get; set; }

    double total;


    public async Task<Product> GetSelectedProduct(int id)
    {
        return await productClient.GetProductFromId(id);
    }

    public async Task<Combo> GetSelectedCombo(int id)
    {
        return await comboClient.GetComboFromId(id);
    }

    private async Task GetSessionCart()
    {
        var cartJson = await SessionStorage.GetAsync<string>("cart");
        if (cartJson.Value != null)
        {
            Cart = System.Text.Json.JsonSerializer.Deserialize<List<ItemCart>>(cartJson.Value);
        }

    }
    private async Task AddProduct()
    {
        if (selectedCombo != null)
        {
            foreach (var product in productsSelectedsGroup)
            {
                selectedCombo.Products.Add(product);
            }

            itemCart.Product = (Combo)selectedCombo;
            itemCart.Quantity = quantity;
            //itemCart.Acompanhamentos = acomps;
            itemCart.Notes = notes;
            itemCart.Store = new Company() { Cnpj = Cnpj };
            itemCart.Table = new Table() { TableNumber = int.Parse(TableNumber) };
            if (acomps != null)
            {
                Cart.Add(itemCart);
                foreach (var acomp in acomps)
                {
                    var item = new ItemCart();
                    item.Product = acomp.Product;
                    item.Quantity = acomp.Quantity;
                    item.Store = new Company() { Cnpj = Cnpj };
                    item.Table = new Table() { TableNumber = int.Parse(TableNumber) };
                    Cart.Add(item);
                }


            }


            var options = new JsonSerializerOptions
            {
                TypeInfoResolver = JsonTypeInfoResolver.Combine(
                new DefaultJsonTypeInfoResolver() )
            };


            await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart,options));
            nav.NavigateTo($"/{Cnpj}/CARDAPIO/M{TableNumber}#cart");

        }
        else
        {
            Console.WriteLine("Combo is null");
        }
    }

    private async Task AddNote(string note, bool isIngredient)
    {
        notes.Add(note);

    }
    private async Task RemoveNote(string note)
    {
        notes.Remove(note);
    }
    private async Task IncrementItem()
    {
        quantity++; StateHasChanged();
    }
    private async Task DecrementItem()
    {
        if (quantity > 1) quantity--; StateHasChanged();
    }
    private async Task AddAcompanhamento(ItemCart item)
    {
        var existingItem = acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id);

        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            item.Quantity = 1;
            acomps.Add(item);
        }

        StateHasChanged();
    }

    private async Task RemoveAcompanhamento(ItemCart item)
    {
        var existingItem = acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id);

        if (existingItem != null)
        {
            if (existingItem.Quantity >= 1)
            {
                existingItem.Quantity--;
            }
            else
            {
                acomps.Remove(item);
            }
        }


        StateHasChanged();
    }

    private void ChangeIngredient(string note, bool isChecked)
    {
        if (!isChecked)
        {
            notes.Add("Sem " + note + ",\n");
        }
        else
        {
            notes.Remove("Sem " + note + ",\n");
        }
    }

    private void ToggleSelectionGroup(Grupo  group, Product product)
    {
        // Encontrar um item já selecionado dentro do grupo
        var existingProduct = productsSelectedsGroup.FirstOrDefault(p => group.Products.Contains(p));

        // Se houver um produto já marcado no grupo, remove
        if (existingProduct != null)
        {
            productsSelectedsGroup.Remove(existingProduct);
        }

        // Adiciona o novo produto selecionado
        productsSelectedsGroup.Add(product);
    }

    private bool IsChecked(Grupo group, Product product) =>
        productsSelectedsGroup.Any(p => p.Id == product.Id);

    private async Task GoToProductPage(int id)
    {
        nav.NavigateTo($"{Cnpj}/Product/{id}/{TableNumber}");
        await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
    }
    private async Task GoToComboPage(int id)
    {
        nav.NavigateTo($"{Cnpj}/Combo/{id}/{TableNumber}");
        await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
    }

    protected override async Task OnInitializedAsync()
    {

        ingredientClient = new IngredientClient($"{Cnpj}");
        productClient = new ProductClient($"{Cnpj}");
        menuClient = new MenuClient($"{Cnpj}");
        comboClient = new ComboClient($"{Cnpj}");
        companyClient = new CompanyClient($"{Cnpj}");
        selectedCombo = await GetSelectedCombo(int.Parse(idCombo));
        selectedAcomps.AddRange(selectedCombo.Products.SelectMany(p => p.Acompanhamentos));

         selectedCombo.Store = await companyClient.GetCompanyFromCnpj(Cnpj);
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetSessionCart();


            _isFirstRender = false;
            StateHasChanged();
        }
    }



}
<style>
    .quantity-controls button {
        width: 30px;
        height: 30px;
        border: none;
        background-color: #00a680;
        color: white;
        font-weight: bold;
        border-radius: 5px;
    }

        .quantity-controls button:hover {
            background-color: #007e5e;
        }

    .quantity-label {
        min-width: 30px;
        display: inline-block;
        text-align: center;
        font-weight: bold;
    }

    .scroll-container {
        display: flex;
        overflow-x: auto;
        gap: 20px;
        padding-bottom: 10px;
    }

    .side-item {
        min-width: 150px;
    }

        .side-item img {
            max-width: 100px;
        }

    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    .product-card {
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: 0.3s;
    }

        .product-card:hover {
            transform: translateY(-5px);
        }

    .follow-up-item {
        transition: 0.3s;
        cursor: pointer;
    }

        .follow-up-item:hover {
            transform: translateY(-3px);
        }

    .ingredient-item {
        cursor: pointer;
    }

    .btn-primary {
        background-color: #00a680;
        border: none;
    }

        .btn-primary:hover {
            background-color: #007e5e;
        }

    .selected {
        border: 2px solid #00a680;
        background-color: rgba(0, 166, 128, 0.1);
    }

</style>
<nav class=" position-fixed navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm" style="width: 100%;z-index: 1000;
">
    <div class="container">
        <a class="navbar-brand fw-bold" href="#">@selectedCombo.Store.Name</a>
    </div>
</nav>
<div class="container my-5" style="margin-top: 7rem !important">
    <div class="row">
        <!-- Product Details -->
        <div class="col-md-6 text-center">
            <img src="@selectedCombo.Image" class="img-fluid rounded" style="width: 450px; height: 305px; object-fit: contain;" alt="Product Image">
        </div>
        <div class="col-md-6 mt-3">
            <h2 class="fw-bold">@selectedCombo.Name</h2>
            <h4 class="">R$@selectedCombo.Value.ToString("F2")</h4>
            <p class="text-muted">@selectedCombo.Description</p>
            <p class="text-muted">@selectedCombo.Kcal <strong> Kcal</strong></p>

            <!-- Ingredient Customization -->
            <div class="mt-4" style="border-bottom: inset;">
                <h5 class="fw-bold">Customize seu combo:</h5>
                <div class="row">

                    <div class="container py-4">
                        <h2 class="text-center">Monte seu Combo</h2>

                        <div class="mb-4">
                            @foreach (var product in selectedCombo.Products)
                            {
                                <h4>Selecione o Produto:</h4>
                                <div class="item">
                                    <img src="@product.Image" alt="produto">
                                    <div class="info">
                                        <h5>@product.Name</h5>
                                        <p>R$ @product.Value.ToString("F2")</p>
                                    </div>
                                    <input type="radio" name="burguer" class="form-check-input" id="burguer1">
                                </div>
                            }


                            @foreach (var group in selectedCombo.Groups)
                            {

                                <div style="margin-top: 10px;">
                                    <h4>Selecione o @group.ViewName:</h4>
                                    @foreach (var product in group.Products)
                                    {


                                        <div class="item">
                                            <img src="@product.Image" alt="produto">
                                            <div class="info">
                                                <h5>@product.Name</h5>
                                                <p>R$ @product.Value.ToString("F2")</p>
                                            </div>
                                            <input type="radio"
                                                   name="grupo-product-@group.Id"
                                                   id="@product.Id"
                                                   class="form-check-input me-2"
                                                   checked="@IsChecked(group, product)"
                                                   @onchange="(e) => ToggleSelectionGroup(group, product)" />
                                        </div>
                                    }
                                </div>

                            }
                          


                        </div>
                        

                   
                    </div>
                </div>


            <!-- Sides Options -->
            @if (selectedAcomps.Count >= 1)
            {
                <div class="container my-5" style="border-bottom: inset;">
                    <h5 class="fw-bold">Acompanhamentos:</h5>
                    <div class="scroll-container">
                        @foreach (var acomp in selectedAcomps)
                        {
                            ItemCart item = new ItemCart()
                    {
                        Product = acomp,
                        Table = new Table() { TableNumber = int.Parse(TableNumber) },
                        Store = new Company() { Cnpj = Cnpj }

                    };
                            <div class="side-item text-center">
                                <img src="@item.Product.Image" class="img-fluid rounded mb-2" alt="Fries">
                                <p class="mb-1">🍟 @item.Product.Name - R$@(item.Product.Value.ToString("F2"))</p>
                                <div class="quantity-controls">
                                    <button @onclick="() => { item.DecrementQuantity(); RemoveAcompanhamento(item); StateHasChanged();}">-</button>
                                    <span class="quantity-label">@(acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id) == null ? 0 : acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id).Quantity)</span>
                                    <button @onclick="() => { item.IncrementQuantity(); AddAcompanhamento(item);StateHasChanged(); }">+</button>
                                </div>
                            </div>
                        }

                    </div>
                </div>


            }




            <!-- Action Buttons -->

            <div class="mt-5"></div>

            <div class="position-fixed bottom-0 start-0 w-100 bg-white p-3 border-top" style="z-index: 1;display: flex;align-items: center;gap: 15px;">
                <div class="col-4">
                    <div class="quantity-controls text-center ">
                        <button @onclick="DecrementItem">-</button>
                        <span class="quantity-label">@quantity</span>
                        <button @onclick="IncrementItem">+</button>
                    </div>
                </div>
                <button @onclick="AddProduct"  class="btn btn-primary btn-lg w-100">
                    Add to Cart R$@((selectedCombo.Value * quantity) + (acomps.Sum(t => t.GetPrice())))
                </button>


            </div>

        </div>

            <h1>Sugestões</h1>
            <section id="menu" class="menu-section" style="background-color: transparent; box-shadow:none">
                        
                @foreach (var category in selectedCombo.CategoriesReccomended)
                {
                    <div class="product-category" style="box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); background-color: #fff;">
                        <h3 class="category-title" style="margin-left: 10px;padding-top: 10px;">
                            @category.Name
                        </h3>
                        <div class="product-list">
                            @foreach (var product in category.Products)
                            {
                                @if (product.Id != selectedCombo.Id || product is not Combo)
                                {
                                    <div class="product-card" @onclick="()=> product is Combo ? GoToComboPage(product.Id) : GoToProductPage(product.Id)">
                                        <img src="@product.Image" alt="Product Image" class="product-image" />
                                        <div class="product-details">
                                            <h4 class="product-name">@product.Name</h4>
                                            <p class="product-description">@product.Description</p>
                                            <div class="product-bottom">
                                                <span class="product-price">R$ @product.Value.ToString("F2")</span>
                                                <button class="add-to-cart">Adicionar</button>
                                            </div>
                                        </div>
                                    </div>
                                }

                            }
                        </div>
                    </div>
                }
            </section>
    </div>
    </div>
</div>




<script>
    function increment(id) {
        const element = document.getElementById(id);
        let value = parseInt(element.innerText);
        element.innerText = value + 1;
    }

    function selecionarUnico(selecionado) {
        document.querySelectorAll('input[name="grupo-product"]').forEach(checkbox => {
            if (checkbox !== selecionado) {
                checkbox.checked = false;
            }
        });
    }

    function decrement(id) {
        const element = document.getElementById(id);
        let value = parseInt(element.innerText);
        if (value > 0) {
            element.innerText = value - 1;
        }
    }
    function toggleSelection(element) {
        element.classList.toggle('selected');
    }
</script>