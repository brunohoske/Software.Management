@page "/{Cnpj}/Product/{idProduct}/{TableNumber}"
@using System.Text.Json

@rendermode InteractiveServer
@inject IJSRuntime js



@code {
    [Parameter]
    public string Cnpj { get; set; } = null!;
    [Parameter]
    public string TableNumber { get; set; } = null!;
    [Parameter]
    public string idProduct { get; set; } = null!;
    List<Ingredient> ingredients = new List<Ingredient>();
    List<Product> selectedAcomps = new List<Product>();
    ItemCart itemCart = new ItemCart();
    List<ItemCart> acomps = new List<ItemCart>();
    List<ItemCart> Cart = new List<ItemCart>();
    List<string> notes = new List<string>();
    int quantity = 1;
    Product selectedProduct;
    private bool _isFirstRender = true;

    public Table Table { get; set; }

    double total;


    public async Task<Product> GetSelectedProduct(int id)
    {
        return await productClient.GetProductFromId(id);
    }
    private async Task GetSessionCart()
    {
        var cartJson = await SessionStorage.GetAsync<string>("cart");
        if (cartJson.Value != null)
        {
            Cart = System.Text.Json.JsonSerializer.Deserialize<List<ItemCart>>(cartJson.Value);
        }

    }
    private async Task AddProduct()
    {
        if (selectedProduct != null)
        {;
            itemCart.Product = selectedProduct;
            itemCart.Quantity = quantity;
            itemCart.Acompanhamentos = acomps;
            itemCart.Notes = notes;
            itemCart.Store = new Company() { Cnpj = Cnpj };
            itemCart.Table = new Table() { TableNumber = int.Parse(TableNumber) };
            Cart.Add(itemCart);
            // Cart.Add(new ItemCart()
            // {
            //     Product = selectedProduct,
            //     Store = new Company() { Cnpj = Cnpj },
            //     Table = new Table() { TableNumber = int.Parse(TableNumber) },
            //     Quantity = quantity,
            //     Acompanhamentos = acomps,
            //     Notes = notes


            // });
            await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
            nav.NavigateTo($"/{Cnpj}/CARDAPIO/M{TableNumber}#cart");

        }
        else
        {
            Console.WriteLine("selectedProduct is null");
        }
    }

    private async Task AddNote(string note, bool isIngredient)
    {
        notes.Add(note);

    }
    private async Task RemoveNote(string note)
    {
        notes.Remove(note);
    }
    private async Task IncrementItem()
    {
        quantity++; StateHasChanged();
    }
    private async Task DecrementItem()
    {
        if(quantity> 1)quantity--; StateHasChanged();
    }
    private async Task AddAcompanhamento(ItemCart item)
    {
        var existingItem = acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id);

        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            item.Quantity = 1; 
            acomps.Add(item);
        }

        StateHasChanged();
    }

    private async Task RemoveAcompanhamento(ItemCart item)
    {
        var existingItem = acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id);

        if(existingItem != null)
        {
            if (existingItem.Quantity > 1)
            {
                existingItem.Quantity--;
            }
            else
            {
                acomps.Remove(item);
            }
        }
       

        StateHasChanged();
    }

    private void ChangeIngredient(string note, bool isChecked)
    {
        if (!isChecked)
        {
            notes.Add("Sem " + note+"\n");
        }
        else
        {
            notes.Remove("Sem " + note + "\n");
        }
    }
    protected override async Task OnInitializedAsync()
    {

        ingredientClient = new IngredientClient($"{Cnpj}");
        productClient = new ProductClient($"{Cnpj}");
        menuClient = new MenuClient($"{Cnpj}");

        ingredients = await ingredientClient.GetProductIngredients(int.Parse(idProduct), Cnpj);
        selectedProduct = await GetSelectedProduct(int.Parse(idProduct));
        selectedAcomps = await productClient.GetAcompanhamentos(int.Parse(idProduct));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await GetSessionCart();

            _isFirstRender = false;
            StateHasChanged();
        }
    }

   
}

<section>
    <img src="@selectedProduct.Image" alt="@selectedProduct.Name" />
    <h1>@selectedProduct.Name</h1>
    <p>@selectedProduct.Description</p>
    <p><strong>R$</strong> @selectedProduct.Value.ToString("F2")</p>
    <p> @selectedProduct.Category</p>
    <p> @selectedProduct.Kcal <strong> Kcal</strong></p>
</section>

<section id="ingredients">
    @foreach (var ingredient in ingredients)
    {
        <div class="ingredient">
            <input @onchange="(e) => ChangeIngredient(ingredient.Name, e.Value != null && (bool)e.Value)" type="checkbox" id="@ingredient.IdIngredient" name="@ingredient.Name" value="@ingredient.Name">

            <label for="@ingredient.Name">@ingredient.Name</label>
        </div>
    }
</section>

<div class="acomp-container">
    @foreach (var acomp in selectedAcomps)
    {
        ItemCart item = new ItemCart()
        {
            Product = acomp,
            Table = new Table() { TableNumber = int.Parse(TableNumber) },
            Store = new Company() { Cnpj = Cnpj }

        };
        <p>@item.Product.Name</p>
        <p>@acomp.Value</p>
        <button @onclick="() => { item.DecrementQuantity(); RemoveAcompanhamento(item); StateHasChanged();}">-</button>
        <input type="text" value="@(acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id) == null ? 0 : acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id).Quantity)" disabled class="quantity-input" />
        <button @onclick="() => { item.IncrementQuantity(); AddAcompanhamento(item);StateHasChanged(); }">+</button>
    }
</div>



<div class="product-container">
    <div class="quantity-price-wrapper">
        <div class="quantity-container">
            <button @onclick="DecrementItem"  class="quantity-btn">-</button>
            <input type="text" value="@quantity" disabled class="quantity-input" />
            <button @onclick="IncrementItem" class="quantity-btn">+</button>
        </div>
        <div class="price-container">
            <!--<p>Total: <strong>R$@((selectedProduct.Value * quantity).ToString("F2"))</strong></p>-->
            <p>Total: <strong>R$@((selectedProduct.Value * quantity) +  (acomps.Sum(t => t.GetPrice())))</strong></p>
        </div>
    </div>
    <div class="add-to-cart-container">
        <button @onclick="AddProduct" class="add-to-cart-btn">Adicionar</button>
    </div>
</div>



