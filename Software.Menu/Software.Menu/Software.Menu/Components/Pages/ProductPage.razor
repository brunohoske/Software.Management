@page "/{Cnpj}/Product/{idProduct}/{TableNumber}"
@using System.Text.Json

@rendermode InteractiveServer
@inject IJSRuntime js



@code {
    [Parameter]
    public string Cnpj { get; set; } = null!;
    [Parameter]
    public string TableNumber { get; set; } = null!;
    [Parameter]
    public string idProduct { get; set; } = null!;


    Company store = new Company();
    List<Ingredient> ingredients = new List<Ingredient>();
    List<Product> selectedAcomps = new List<Product>();
    ItemCart itemCart = new ItemCart();
    List<ItemCart> acomps = new List<ItemCart>();
    List<ItemCart> Cart = new List<ItemCart>(); 
    List<string> notes = new List<string>();
    int quantity = 1;
    Product selectedProduct;
    private bool _isFirstRender = true;

    List<(int, bool)> _ingredientChecked = new List<(int, bool)>();

    public Table Table { get; set; }

    double total;


    public async Task<Product> GetSelectedProduct(int id)
    {
        return await productClient.GetProductFromId(id);
    }
    private async Task GetSessionCart()
    {
        var cartJson = await SessionStorage.GetAsync<string>("cart");
        if (cartJson.Value != null)
        {
            Cart = System.Text.Json.JsonSerializer.Deserialize<List<ItemCart>>(cartJson.Value);
        }

    }
    private async Task AddProduct()
    {
        if (selectedProduct != null)
        {
            itemCart.Product = selectedProduct;
            itemCart.Quantity = quantity;
            //itemCart.Acompanhamentos = acomps;
            itemCart.Notes = notes;
            itemCart.Store = new Company() { Cnpj = Cnpj };
            itemCart.Table = new Table() { TableNumber = int.Parse(TableNumber) };
            itemCart.Table = new Table() { TableNumber = int.Parse(TableNumber) };
            Cart.Add(itemCart);
            if (acomps != null)
            {
                
                for( int i =0; i < quantity; i++)
                {
                    foreach (var acomp in acomps)
                    {
                        var item = new ItemCart();
                        item.Product = acomp.Product;
                        item.Quantity = acomp.Quantity;
                        item.Store = new Company() { Cnpj = Cnpj };
                        item.Table = new Table() { TableNumber = int.Parse(TableNumber) };
                        Cart.Add(item);
                    }
                }
                
            }



            await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
            //nav.NavigateTo($"/{Cnpj}/CARDAPIO/M{TableNumber}#cart");
            await js.InvokeVoidAsync("history.back");

        }
        else
        {
            Console.WriteLine("selectedProduct is null");
        }
    }

    private async Task AddNote(string note, bool isIngredient)
    {
        notes.Add(note);

    }
    private async Task RemoveNote(string note)
    {
        notes.Remove(note);
    }
    private async Task IncrementItem()
    {
        quantity++; StateHasChanged();
    }
    private async Task DecrementItem()
    {
        if (quantity > 1) quantity--; StateHasChanged();
    }
    private async Task AddAcompanhamento(ItemCart item)
    {
        var existingItem = acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id);

        if (existingItem != null)
        {
            existingItem.Quantity++;
        }
        else
        {
            item.Quantity = 1;
            acomps.Add(item);
        }

        StateHasChanged();
    }

    private async Task RemoveAcompanhamento(ItemCart item)
    {
        var existingItem = acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id);

        if (existingItem != null)
        {
            if (existingItem.Quantity >= 1)
            {
                existingItem.Quantity--;
            }
            else
            {
                acomps.Remove(item);
            }
        }


        StateHasChanged();
    }

    private void ChangeIngredient(string note, bool isChecked)
    {
        if (!isChecked)
        {
            notes.Add("Sem " + note + ",\n");
        }
        else
        {
            notes.Remove("Sem " + note + ",\n");
        }
    }

    private async Task GoToProductPage(int id)
    {
        nav.NavigateTo($"{Cnpj}/Product/{id}/{TableNumber}");
        await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
    }
    private async Task GoToComboPage(int id)
    {
        nav.NavigateTo($"{Cnpj}/Combo/{id}/{TableNumber}");
        await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
    }
    private async Task ReturnPage()
    {
        await SessionStorage.SetAsync("cart", JsonSerializer.Serialize(Cart));
        await js.InvokeVoidAsync("history.back");
    }
    protected override async Task OnInitializedAsync()
    {
        companyClient = new CompanyClient($"{Cnpj}");
        ingredientClient = new IngredientClient($"{Cnpj}");
        productClient = new ProductClient($"{Cnpj}");
        menuClient = new MenuClient($"{Cnpj}");
        checkClient = new CheckClient($"{Cnpj}");

        ingredients = await ingredientClient.GetProductIngredients(int.Parse(idProduct), Cnpj);
        selectedProduct = await GetSelectedProduct(int.Parse(idProduct));
        selectedProduct.Store = await companyClient.GetCompanyFromCnpj(Cnpj);
        selectedAcomps = await productClient.GetAcompanhamentos(int.Parse(idProduct));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (!await checkClient.CheckExists(int.Parse(TableNumber)))
            {
                nav.NavigateTo("/404", true);
            }
            await GetSessionCart();
            

            _isFirstRender = false;
            StateHasChanged();
        }
    }



}
<style>
    .quantity-controls button {
        width: 30px;
        height: 30px;
        border: none;
        background-color: #00a680;
        color: white;
        font-weight: bold;
        border-radius: 5px;
    }

        .quantity-controls button:hover {
            background-color: #007e5e;
        }

    .quantity-label {
        min-width: 30px;
        display: inline-block;
        text-align: center;
        font-weight: bold;
    }

    .scroll-container {
        display: flex;
        overflow-x: auto;
        gap: 20px;
        padding-bottom: 10px;
    }

    .side-item {
        min-width: 150px;
    }

        .side-item img {
            max-width: 100px;
        }

    body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    .product-card {
        box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.1);
        transition: 0.3s;
    }

        .product-card:hover {
            transform: translateY(-5px);
        }

    .follow-up-item {
        transition: 0.3s;
        cursor: pointer;
    }

        .follow-up-item:hover {
            transform: translateY(-3px);
        }

    .ingredient-item {
        cursor: pointer;
    }

    .btn-primary {
        background-color: #00a680;
        border: none;
    }

        .btn-primary:hover {
            background-color: #007e5e;
        }

    .selected {
        border: 2px solid #00a680;
        background-color: rgba(0, 166, 128, 0.1);
    }

</style>
<nav class=" position-fixed navbar navbar-expand-lg navbar-light bg-white border-bottom shadow-sm " style="width: 100%;z-index: 1000;">
    <div class="container" style="box-shadow: none !important;justify-content: flex-start;">
        <svg @onclick="ReturnPage" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" style="width: 20px;margin-bottom: 5px;margin-right: 12px; cursor:pointer"><path d="M48 256a208 208 0 1 1 416 0A208 208 0 1 1 48 256zm464 0A256 256 0 1 0 0 256a256 256 0 1 0 512 0zM217.4 376.9c4.2 4.5 10.1 7.1 16.3 7.1c12.3 0 22.3-10 22.3-22.3l0-57.7 96 0c17.7 0 32-14.3 32-32l0-32c0-17.7-14.3-32-32-32l-96 0 0-57.7c0-12.3-10-22.3-22.3-22.3c-6.2 0-12.1 2.6-16.3 7.1L117.5 242.2c-3.5 3.8-5.5 8.7-5.5 13.8s2 10.1 5.5 13.8l99.9 107.1z"></path></svg>
        <a class="navbar-brand fw-bold" href="#">@(selectedProduct.Store.Name)</a>
    </div>
</nav>
<div class="container my-5" style="margin-top: 7rem !important;">
    <div class="row">
        <!-- Product Details -->
        <div class="col-md-6 text-center">
            <img src="@selectedProduct.Image" class="img-fluid rounded" style="width: 450px; height: 305px; object-fit: contain;" alt="Product Image">
        </div>
        <div class="col-md-6 mt-3">
            <h2 class="fw-bold">@selectedProduct.Name</h2>
            <h4 class="">R$@selectedProduct.Value.ToString("F2")</h4>
            <p class="text-muted">@selectedProduct.Description</p>
            <p class="text-muted">@selectedProduct.Category.Name</p>
            <p class="text-muted">@selectedProduct.Kcal <strong> Kcal</strong></p>

            <!-- Ingredient Customization -->
            <div class="mt-4" style="border-bottom: inset;">
                <h5 class="fw-bold">Customize Your Ingredients:</h5>
                <div class="row">

                    @foreach (var ingredient in ingredients)
                    {
                        _ingredientChecked.Add(new(ingredient.IdIngredient, true));

                        int index = _ingredientChecked.FindIndex(x => x.Item1 == ingredient.IdIngredient);
                        <div class="col-6">
                            <div class="ingredient-item p-2 border rounded mb-2 @(_ingredientChecked[index].Item2? "" : "selected")" id="@ingredient.IdIngredient" name="@ingredient.Name" @onclick="(e) => ChangeIngredient(ingredient.Name, (_ingredientChecked[index] = (_ingredientChecked[index].Item1, !_ingredientChecked[index].Item2)).Item2 )">
                                🧀Sem @ingredient.Name
                            </div>
                        </div>
                    }
                </div>
            </div>
            <!-- Sides Options -->
            @if (selectedAcomps.Count >= 1)
            {
                <div class="container my-5" style="border-bottom: inset;">
                    <h5 class="fw-bold">Acompanhamentos:</h5>
                    <div class="scroll-container">
                        @foreach (var acomp in selectedAcomps)
                        {
                            ItemCart item = new ItemCart()
                    {
                        Product = acomp,
                        Table = new Table() { TableNumber = int.Parse(TableNumber) },
                        Store = new Company() { Cnpj = Cnpj }

                    };
                            <div class="side-item text-center">
                                <img src="@item.Product.Image" class="img-fluid rounded mb-2" alt="Fries">
                                <p class="mb-1">🍟 @item.Product.Name - R$@(item.Product.Value.ToString("F2"))</p>
                                <div class="quantity-controls">
                                    <button @onclick="() => { item.DecrementQuantity(); RemoveAcompanhamento(item); StateHasChanged();}">-</button>
                                    <span class="quantity-label">@(acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id) == null ? 0 : acomps.FirstOrDefault(a => a.Product.Id == item.Product.Id).Quantity)</span>
                                    <button @onclick="() => { item.IncrementQuantity(); AddAcompanhamento(item);StateHasChanged(); }">+</button>
                                </div>
                            </div>
                        }

                    </div>
                </div>

            
            }
            


            
            <!-- Action Buttons -->
            
            <div class="mt-5"></div>
            <div class="position-fixed bottom-0 start-0 w-100 bg-white p-3 border-top" style="z-index: 1;display: flex;align-items: center;gap: 15px;">
                <div class="col-4">
                    <div class="quantity-controls text-center ">
                        <button @onclick="DecrementItem">-</button>
                        <span class="quantity-label">@quantity</span>
                        <button @onclick="IncrementItem">+</button>
                    </div>
                </div>
                <button @onclick="AddProduct" class="btn btn-primary btn-lg w-100">
                    Add to Cart R$@((selectedProduct.Value  * quantity)+ acomps.Sum(t => t.GetPrice() * quantity))
                </button>


            </div>

        </div>

        <h1>Sugestões</h1>
        <section id="menu" class="menu-section" style="background-color: transparent; box-shadow:none">

            @foreach (var category in selectedProduct.CategoriesReccomended)
            {
                <div class="product-category" style="box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1); background-color: #fff;">
                    <h3 class="category-title" style="margin-left: 10px;padding-top: 10px;">
                        @category.Name
                    </h3>
                    <div class="product-list">
                        @foreach (var product in category.Products)
                        {
                            @if (product.Id != selectedProduct.Id || product is Combo)
                            {
                                <div class="product-card" @onclick="()=> product is Combo ? GoToComboPage(product.Id) : GoToProductPage(product.Id)">
                                    <img src="@product.Image" alt="Product Image" class="product-image" />
                                    <div class="product-details">
                                        <h4 class="product-name">@product.Name</h4>
                                        <p class="product-description">@product.Description</p>
                                        <div class="product-bottom">
                                            <span class="product-price">R$ @product.Value.ToString("F2")</span>
                                            <button class="add-to-cart">Adicionar</button>
                                        </div>
                                    </div>
                                </div>
                            }
                            
                        }
                    </div>
                </div>
            }
        </section>
    </div>
</div>




<script>
    function increment(id) {
        const element = document.getElementById(id);
        let value = parseInt(element.innerText);
        element.innerText = value + 1;
    }

    function decrement(id) {
        const element = document.getElementById(id);
        let value = parseInt(element.innerText);
        if (value > 0) {
            element.innerText = value - 1;
        }
    }
    function toggleSelection(element) {
        element.classList.toggle('selected');
    }
</script>